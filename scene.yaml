# Author: Geraldine Sarmiento

# Tangram Blocks
# https://tangrams.github.io/blocks/
# Patricio Gonzalez Vivo

cameras:
    camera1:
        type: perspective

global:
    # default order for basemap features
    feature_order: function() { return feature.sort_rank; }
    feature_order_down_1: function() { return feature.sort_rank - 1; }
    building_extrude_height: |
        function () { return feature.height > 16 || $zoom >= 16; }

    # Sign up for a Mapzen API key to enjoy higher rate limits
    # https://mapzen.com/documentation/overview/#developer-accounts-and-api-keys
    sdk_api_key: '3eqm2_bfTNGZ85ar20fVyA'     # set this value to your Mapzen API key

    text_font_family: 'Orbitron'

# Fonts
fonts:
    Orbitron:
        - weight: normal # Regular
          # url: https://fonts.gstatic.com/s/orbitron/v7/94ug0rEgQO_WuI_xKJMFc3YhjbSpvc47ee6xR_80Hnw.woff
          url: fonts/94ug0rEgQO_WuI_xKJMFc3YhjbSpvc47ee6xR_80Hnw.woff

    Cairo:
        - weight: normal # Regular
          # url: https://fonts.gstatic.com/s/cairo/v1/ZA_4ooaF_Dfdn26t_IoQOaCWcynf_cDxXwCLxiixG1c.woff
          url: fonts/ZA_4ooaF_Dfdn26t_IoQOaCWcynf_cDxXwCLxiixG1c.woff


scene:
    background:
        color: [0.750,0.750,0.750]

sources:
    # mapzen:
    #     type: MVT
    #     # url:  https://tile.nextzen.org/tilezen/vector/v1/512/all/{z}/{x}/{y}.mvt
    #     url: https://xyz.api.here.com/tiles/osmbase/512/all/{z}/{x}/{y}.mvt
    #     url_params:
    #         api_key: JJiaZE63TZObzPrmx0TQkw
    #     tile_size: 512
    #     max_zoom: 16

    mapzen:
        type: MVT
        url: https://tile.nextzen.org/tilezen/vector/v1/512/all/{z}/{x}/{y}.mvt
        url_params:
            api_key: global.sdk_api_key
        rasters: [normals-elevation]
        tile_size: 512
        max_zoom: 15
    normals-elevation:
        type: Raster
        url: https://tile.nextzen.org/tilezen/terrain/v1/512/normal/{z}/{x}/{y}.png
        url_params:
            api_key: global.sdk_api_key
        tile_size: 512
        max_zoom: 14

    xyz-osm:
        type: MVT
        url: https://xyz.api.here.com/tiles/osmbase/256/all/{z}/{x}/{y}.mvt

layers:
    earth:
        data: { source: mapzen, layer: earth }
        draw:
            polygons:
                style: elevation-stripes
                order: global.feature_order
                color: [0.300,0.300,0.300] #color of stripes

    landuse:
        data: { source: mapzen }
        draw:
            polygons:
                style: elevation-stripes
                order: global.feature_order
                color: [0.250,0.250,0.250]

    water:
        data: { source: mapzen, layer: water }
        draw:
            polygons:
                order: global.feature_order
                color: [0.750,0.750,0.750]

        lakes:
            draw:
                polygons:
                    color: [0.750,0.750,0.750]

        other-water-areas:
            filter: { not: { kind: [ocean, lake, water, reservoir] }, $zoom: { min: 11 }, area: { min: 100 } }
            draw:
                polygons:
                    color: [0.750,0.750,0.750]

    buildings:
        data: { source: mapzen, layer: buildings }
        filter:
            not: { location: underground }
            any:
                - { $zoom: [13], scale_rank: [1,2,3] }
                - { $zoom: [14], scale_rank: [1,2,3] }
                - { $zoom: [15], height: { min: 100 } }
                - { $zoom: [15], area: { min: 700 } }
                - { $zoom: [15], volume: { min: 100000 } }
                - { $zoom: [16], area: { min: 100 } }
                - { $zoom: [16], volume: { min: 50000 } }
                - { $zoom: { min: 17 }, area: true }
        draw:
            polygons:
                visible: false
                order: 329
                color: [1.000,1.000,1.000,0.55]
                style: polygons_transparent
    
        footprints:
            draw:
                polygons:
                    visible: true

    places:
        data: { source: mapzen, layer: places }
        filter:
            name: true
        draw:
            text-blend-order:
                visible: false    # labels are enabled by each layer below
                buffer: 3px
                font:
                    family: global.text_font_family
                    fill: [0.000,0.000,0.000]
            # END NOTE

        populated-places:
            filter:
                kind: locality
            draw:
                text-blend-order:
                    visible: true
                    buffer: 42px
                    font:
                        size: [[5,9px],[8,10px],[12,11px]]
                        stroke: { color: [0.750,0.750,0.750], width: 6px }

            # _text_early:
            #     filter: { $zoom: { max: 11 } }
            #     draw:
            #         text-blend-order:
            #             visible: false


            # HACK
            # NOTE: These should use icon: buffer instead of going visible: false, but there are problems using icon here :(
            # This fixes Paris area, but causes problems for small places in the USA eg Table Bluff near Eureka, California.
            funky-village:
                filter: { $zoom: [11], population: { max: 1000 }, kind_detail: [village] }
                draw:
                    text-blend-order:
                        visible: false
            funky-isolated_dwelling:
                filter: { $zoom: [13], kind_detail: [isolated_dwelling] }
                draw:
                    text-blend-order:
                        visible: false
            hamlet:
                filter: { $zoom: [13], kind_detail: hamlet }
                draw:
                    text-blend-order:
                        visible: false
            # END HACK

            # someone in London and Salt Lake City thought neighbourhoods should be tagged place: locality
            # They were wrong
            funky-fake-neighbourhoods:
                filter: { $zoom: { min: 13 }, kind_detail: [locality] }
                draw:
                    text-blend-order:
                        visible: false


            population-10m-up:
                filter:
                    population: { min: 10000000 }
                draw:
                    text-blend-order:
                        priority: 6
                        font:
                            size: [[2,11px],[6,15px],[8,18px],[10,20px],[12,20px],[13,0px]]
            population-5m-10m:
                filter:
                    population: { min: 5000000, max: 10000000 }
                draw:
                    text-blend-order:
                        priority: 7
                        font:
                            size: [[4,10px],[6,14px],[8,18px],[10,20px],[12,20px],[13,0px]]
            population-1m-5m:
                filter:
                    population: { min: 1000000, max: 5000000 }
                draw:
                    text-blend-order:
                        priority: 9
                        font:
                            size: [[4,10px],[6,14px],[8,15px],[12,18px],[13,0px]]
            population-500k-1m:
                filter:
                    population: { min: 500000, max: 1000000 }
                draw:
                    text-blend-order:
                        priority: 11
                        font:
                            size: [[5,10px],[8,12px],[10,14px],[12,16px],[13,0px]]
            population-200k-500k:
                filter:
                    population: { min: 200000, max: 500000 }
                draw:
                    text-blend-order:
                        priority: 13
                        font:
                            size: [[6,10px],[8,14px],[10,15px],[12,16px],[13,0px]]
            population-100k-200k:
                filter:
                    population: { min: 100000, max: 200000 }
                draw:
                    text-blend-order:
                        priority: 15
                        font:
                            size: [[6,10px],[8,12px],[14,14px],[15,0px]]
            population-50k-100k:
                filter:
                    population: { min: 50000, max: 100000 }
                draw:
                    text-blend-order:
                        priority: 17
                        font:
                            size: [[6,10px],[8,12px],[14,14px],[15,0px]]
            population-20k-50k:
                filter:
                    population: { min: 20000, max: 50000 }
                draw:
                    text-blend-order:
                        priority: 19
                        font:
                            size: [[9,10px],[14,12px],[15,0px]]
            population-10k-20k:
                filter:
                    population: { min: 10000, max: 20000 }
                draw:
                    text-blend-order:
                        priority: 21
                        font:
                            size: [[9, 10px],[14, 12px],[15, 0px]]
            population-5k-10k:
                filter:
                    population: { min: 5000, max: 10000 }
                draw:
                    text-blend-order:
                        priority: 23
                        font:
                            size: [[9,10px], [14,12px], [15,0px]]
            population-2k-5k:
                filter:
                    population: { min: 2000, max: 5000 }
                draw:
                    text-blend-order:
                        priority: 25
                        font:
                            size: [[9,10px], [14,12px], [15,0px]]
            population-1k-2k:
                filter:
                    population: { min: 1000, max: 2000 }
                draw:
                    text-blend-order:
                        priority: 27
                        font:
                            size: [[9, 10px], [14, 12px], [15, 0px]]
            population-200-1k:
                filter:
                    population: { min: 200, max: 1000 }
                draw:
                    text-blend-order:
                        priority: 28
                        font:
                            size: [[9, 10px], [14, 11px], [15, 0px]]

styles:
    text-blend-order:
        base: text
        blend_order: 10
    dashed-lines:
        base: lines
        dash: [4,2]
    polygons_transparent:
        base: polygons
        blend: overlay
    block:
        shaders:
            defines:
                ADD: +
                EPSILON: 1.0e-07
                HALF_PI: 1.5707963267948966
                MULTIPLY: '*'
                PI: 3.141592653589793
                QUATER_PI: 0.785398163
                SUBTRACT: '-'
                TWO_PI: 6.283185307179586
                deg2rad(d): (((d)*3.1415926535897932384626433832795)/180.0)
                rad2deg(d): (((d)*180.0)/3.1415926535897932384626433832795)
    elevation-stripes:
        base: polygons
        blend: inlay
        doc:
            author:
                name: Patricio Gonzalez Vivo
                twitter: patriciogv
            description: 'Perfect for the `landuse` layer on your elevation maps,
                the `elevation-stripe` modules use the color of the layer to draw
                a stripe pattern that changes width based on the surface of the terrain.

                '
            examples:
                stripes:
                    img: https://tangrams.github.io/tangram-sandbox/styles/elevation-stripes.png
                    url: https://tangrams.github.io/tangram-sandbox/styles/elevation-stripes.yaml
            licence: MIT
            tangram-version: 0.0.7
            version: 0.0.1
        lighting: false
        mix:
        - polygons-diagonal-stripes
        raster: custom
        shaders:
            defines:
                NORMAL_TEXTURE_INDEX: 0
                STRIPES_ALPHA: 0.75
                STRIPES_DIR: vec3(-0.600,-0.420,0.600)
                STRIPES_PCT: 1.2
                STRIPES_SCALE: 32.0
                STRIPES_WIDTH: dot((sampleRaster(int(NORMAL_TEXTURE_INDEX)).rgb-.5)*2.,
                    STRIPES_DIR)*STRIPES_PCT
    functions-aastep:
        doc:
            author:
                name: Matt DesLauriers
                twitter: mattdesl
            description: 'AnitAliased ```step()``` function implemented by [Matt DesLauriers](https://twitter.com/mattdesl)
                in this module <https://github.com/stackgl/glsl-aastep>

                '
            licence: MIT
            tangram-version: 0.0.7
            version: 0.0.1
        shaders:
            blocks:
                global: "// AntiAliased Step function\n//=============================\n\
                    float aastep(float threshold, float value) {\n    #ifdef TANGRAM_FRAGMENT_SHADER\n\
                    \        #ifdef TANGRAM_EXTENSION_OES_standard_derivatives\n \
                    \           float afwidth = length(vec2(dFdx(value), dFdy(value)))\
                    \ * 0.70710678118654757;\n            return smoothstep(threshold-afwidth,\
                    \ threshold+afwidth, value);\n        #else\n            return\
                    \ step(threshold, value);\n        #endif  \n    #else\n     \
                    \   return step(threshold, value);\n    #endif\n}"
            extensions: OES_standard_derivatives
    geometry-matrices:
        doc:
            author:
                name: Patricio Gonzalez Vivo
                twitter: patriciogv
            description: 'Useful set of functions to construct scale, rotation and
                translation of 2, 3 or 4 dimensions. For more information about matrices
                read [this chapter from The Book of Shaders](http://thebookofshaders.com/08/)

                '
            licence: MIT
            tangram-version: 0.0.7
            version: 0.0.1
        mix:
        - block
        shaders:
            blocks:
                global: "// Rotate in 2, 3 and 4 dimensions\n// ================================\n\
                    mat2 rotate2D (float angle) {\n    return mat2(cos(angle),-sin(angle),\n\
                    \                sin(angle),cos(angle));\n}\n#ifdef TANGRAM_FRAGMENT_SHADER\n\
                    vec2 rotate2D (vec2 st, float a) {\n    return (rotate2D(a)*(st-.5))+.5;\n\
                    }\n#endif\nmat3 rotateX3D (float phi) {\n    return mat3(\n  \
                    \      vec3(1.,0.,0.),\n        vec3(0.,cos(phi),-sin(phi)),\n\
                    \        vec3(0.,sin(phi),cos(phi)));\n}\nmat4 rotateX4D (float\
                    \ phi) {\n    return mat4(\n        vec4(1.,0.,0.,0),\n      \
                    \  vec4(0.,cos(phi),-sin(phi),0.),\n        vec4(0.,sin(phi),cos(phi),0.),\n\
                    \        vec4(0.,0.,0.,1.));\n}\nmat3 rotateY3D (float theta)\
                    \ {\n    return mat3(\n        vec3(cos(theta),0.,-sin(theta)),\n\
                    \        vec3(0.,1.,0.),\n        vec3(sin(theta),0.,cos(theta)));\n\
                    }\nmat4 rotateY4D (float theta) {\n    return mat4(\n        vec4(cos(theta),0.,-sin(theta),0),\n\
                    \        vec4(0.,1.,0.,0.),\n        vec4(sin(theta),0.,cos(theta),0.),\n\
                    \        vec4(0.,0.,0.,1.));\n}\nmat3 rotateZ3D (float psi) {\n\
                    \    return mat3(\n        vec3(cos(psi),-sin(psi),0.),\n    \
                    \    vec3(sin(psi),cos(psi),0.),\n        vec3(0.,0.,1.));\n}\n\
                    mat4 rotateZ4D (float psi) {\n    return mat4(\n        vec4(cos(psi),-sin(psi),0.,0),\n\
                    \        vec4(sin(psi),cos(psi),0.,0.),\n        vec4(0.,0.,1.,0.),\n\
                    \        vec4(0.,0.,0.,1.));\n}\n//\n// Scale 4 dimensions\n//\
                    \ ================================\nmat4 scale4D (float x, float\
                    \ y, float z) {\n    return mat4(\n        vec4(x,   0.0, 0.0,\
                    \ 0.0),\n        vec4(0.0, y,   0.0, 0.0),\n        vec4(0.0,\
                    \ 0.0, z,   0.0),\n        vec4(0.0, 0.0, 0.0, 1.0)\n    );\n\
                    }\n//\n// Translate in 4 dimensions\nmat4 translate4D (float x,\
                    \ float y, float z) {\n    return mat4(\n        vec4(1.0, 0.0,\
                    \ 0.0, 0.0),\n        vec4(0.0, 1.0, 0.0, 0.0),\n        vec4(0.0,\
                    \ 0.0, 1.0, 0.0),\n        vec4(x,   y,   z,   1.0)\n    );\n\
                    }\n"
    patterns-stripes:
        doc:
            author:
                name: Patricio Gonzalez Vivo
                twitter: patriciogv
            description: "Collection of functions to draw stripes. To learn more about\
                \ patterns check [this chapter from the Book of Shaders](https://thebookofshaders.com/09/)\
                \    \n"
            examples:
                grain-area:
                    img: https://tangrams.github.io/tangram-sandbox/styles/grain-area.png
                    lines: 26
                    url: https://tangrams.github.io/tangram-sandbox/styles/grain-area.yaml
                press:
                    img: https://tangrams.github.io/tangram-sandbox/styles/press.png
                    lines: 150
                    url: https://tangrams.github.io/tangram-sandbox/styles/press.yaml
                radar:
                    img: https://tangrams.github.io/tangram-sandbox/styles/radar.png
                    url: https://tangrams.github.io/tangram-sandbox/styles/radar.yaml
            licence: MIT
            tangram-version: 0.0.7
            version: 0.0.1
        mix:
        - functions-aastep
        - geometry-matrices
        shaders:
            blocks:
                global: "// Return a distance function of stripes\nfloat stripesDF\
                    \ (vec2 st) {\n    return abs(sin(st.y*PI));\n}\n\n// Adjustable\
                    \ width stripes\nfloat stripes (vec2 st, float width) {\n    return\
                    \ aastep(width, stripesDF(st));\n}\n\n// Adjustable Angle\nfloat\
                    \ stripes (vec2 st, float width, float angle) {\n    st = rotate2D(angle)\
                    \ * st;\n    return stripes(st, width);\n}\n\n// Faster optimisation\
                    \ of diagonal stripes\nfloat diagonalStripes (vec2 st) {\n   \
                    \ vec2 i_st = floor(st);\n    vec2 f_st = fract(st);\n    if (mod(i_st.y,2.)\
                    \ - mod(i_st.x,2.) == 0.) {\n        return 1.0 - aastep(f_st.x,f_st.y);\n\
                    \    } else {\n        return aastep(f_st.x,f_st.y);\n    }\n\
                    }\n\n// Faster optimisation of diagonal stripes with controlable\
                    \ width\nfloat diagonalStripes (vec2 st, float width) {\n    st.y\
                    \ -= st.x;\n    return stripes(st, width);\n}"
            defines:
                PI: 3.141592653589793
    polygons-diagonal-stripes:
        base: polygons
        doc:
            author:
                name: Patricio Gonzalez Vivo
                twitter: patriciogv
            description: 'Apply a diagonal stripe pattern to the polygon style. To
                learn more about patterns check [this chapter from the Book of Shaders](https://thebookofshaders.com/09/)

                '
            licence: MIT
            tangram-version: 0.0.7
            version: 0.0.1
        mix:
        - patterns-stripes
        - space-tile
        shaders:
            blocks:
                color: "color.a = diagonalStripes( (getTileCoords()*0.9999)*floor(STRIPES_SCALE),\
                    \ \n                            STRIPES_WIDTH) * STRIPES_ALPHA;"
            defines:
                STRIPES_ALPHA: 1.0
                STRIPES_SCALE: 2.0
                STRIPES_WIDTH: 0.5
        ui:
            shaders:
                defines:
                    STRIPES_ALPHA:
                        label: Alpha
                        range:
                            max: 1.0
                            min: 0.0
                            step: 0.01
                        type: number
                    STRIPES_SCALE:
                        label: Scale
                        range:
                            max: 1000.0
                            min: 1.0
                            step: 1.0
                        type: number
                    STRIPES_WIDTH:
                        label: Alpha
                        range:
                            max: 1.0
                            min: 0.0
                            step: 0.01
                        type: number
    space-tile:
        doc:
            author:
                name: Patricio Gonzalez Vivo
                twitter: patriciogv
            description: 'Get the position on the tile

                '
            licence: MIT
            tangram-version: 0.0.7
            version: 0.0.1
        shaders:
            blocks:
                global: "// Variant to be add to both vertex and fragments shaders\n\
                    #ifndef v_pos\nvarying vec3 v_pos;\n#endif\n\n//\n// Get the coordinates\
                    \ in tile space\n// ================================\nvec2 getTileCoords()\
                    \ {\n    return fract(v_pos.xy);\n}\n"
                position: '// Normalize the attribute position of a vertex

                    v_pos = modelPosition().xyz;'
        test:
            tile:
                blocks:
                    color: 'vec2 st = getTileCoords();

                        color.rg += fract(st*3.);

                        '
                defines:
                    v_pos: v_texcoord
